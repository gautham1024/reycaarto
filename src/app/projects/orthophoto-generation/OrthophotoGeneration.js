import React, { useState } from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { motion } from 'framer-motion';

// Project data (extracted from the document)
const projects = [
  {
    id: 1,
    title: 'Orthophoto - High Resolution Multi band',
    details: {
      'Project Volume': '9027.56 ha',
      'Sensor': 'DMC_0129,RGB+IR,12bit',
      'GSD': '8cm'
    },
    description: 'The provided Digital Aerial Images have been triangulated by using provided ground control points. Inpho software has been used for triangulation of images. DTM features have been compiled as per the specifications. Orthophotos were generated using inphos software in prthomaster module.',
    images: 2
  },
  {
    id: 2,
    title: 'Orthophoto - Airport Area',
    details: {
        'Project Volume': '37629 ha',
        'Sensor': 'Aerial Frame Images, RGB',
        'GSD': '0.1m'
    },
    description: 'Project setup has been done with the provided aerial frame images. Ground controls have been verified in stereo for quality confirmation of block file. DTM has been generated by using the restituted terrain features.',
    images: 2
  },

  {
    id: 3,
    title: 'Orthophoto - Coastal Corridor',
    details: {
        'Project Volume': '1376 images of 12 microns',
        'Sensor': 'Digital Aerial Images(DMC)',
        'GSD': '0.15m'
    },
    description: 'It is a coastal corridor mapping. Aerial Images from DMC camera have been triangulated by using client provided ground control points. Orthophoto mosaic tiles have been generated as per the client provided index.',
    images: 2
  },

  {
    id: 4,
    title: 'Orthophoto - Urban Area',
    details: {
        'Project Volume': '23200 ha',
        'Sensor': 'RGB and CIR',
        'GSD': '0.25m'
    },
    description: 'DTM was compiled for whole project area and then orthorectification was done for 4 band images at 0.25m GSD. Final output was delivered in two sets of orthophoto mosaics RGB and Color Infrared(CIR) using compiled DTM. Final CIR Orthophoto tiles were cut into final tiles as per ortho tile index.',
    images: 2
  },

  {
    id: 5,
    title: 'Orthophoto - Rural Area',
    details: {
        'Project Volume': '7530 images',
        'Sensor': 'DMC',
        'GSD': '0.5m and 0.25m'
    },
    description: 'Project setup has been done using exterior parameters and DMC images. Orthophotos have been generated using restituted terrain elements and DEM. Orthophotos have been corrected geometrically and radiometrically.',
    images: 2
  },

  {
    id: 6,
    title: 'Georeferencing and orthorectification of Rapid Eye Images',
    details: {
        'Project Volume': '12 Different ROIs(villages)',
        'Sensor': 'Rapid Eye',
        'GSD': '5m'
    },
    description: 'Rapid Eye images(5 bands) in NTF format have been combined as single image of NFT format using Erdas. Rapid eye images were orthorectified. Final data has been delivered in two sets one RGB and other is five band images as per the AOI.',
    images: 3
  },
  // Add other projects similarly...
];

// Image Carousel Component
const ImageCarousel = ({ projectId, totalImages }) => {
  const [currentImage, setCurrentImage] = useState(0);

  const nextImage = () => {
    setCurrentImage((prev) => (prev + 1) % totalImages);
  };

  const prevImage = () => {
    setCurrentImage((prev) => (prev - 1 + totalImages) % totalImages);
  };

  return (
    <div className="relative w-full max-w-md mx-auto group">
      <motion.div 
        className="w-full h-64 bg-gray-200 rounded-lg overflow-hidden relative"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        <img 
          src={`/images/project-images/orthophotoprojects/project-${projectId}-${currentImage + 1}.jpg`} 
          alt={`Project ${projectId} Image ${currentImage + 1}`}
          className="w-full h-full object-cover"
        />
        
        {/* Navigation Buttons */}
        <button 
          onClick={prevImage} 
          className="absolute left-2 top-1/2 -translate-y-1/2 bg-white/50 hover:bg-white/75 rounded-full p-1 transition-all opacity-0 group-hover:opacity-100"
        >
          <ChevronLeft className="text-gray-800" />
        </button>
        <button 
          onClick={nextImage} 
          className="absolute right-2 top-1/2 -translate-y-1/2 bg-white/50 hover:bg-white/75 rounded-full p-1 transition-all opacity-0 group-hover:opacity-100"
        >
          <ChevronRight className="text-gray-800" />
        </button>

        {/* Image Counter */}
        <div className="absolute bottom-2 left-1/2 -translate-x-1/2 bg-black/50 text-white px-2 py-1 rounded-full text-xs">
          {currentImage + 1} / {totalImages}
        </div>
      </motion.div>
    </div>
  );
};

// Project Card Component
const ProjectCard = ({ project }) => {
  return (
    <motion.div 
      className="bg-white shadow-lg rounded-xl p-6 space-y-4 hover:shadow-xl transition-all duration-300"
      initial={{ opacity: 0, scale: 0.95 }}
      whileHover={{ scale: 1.02 }}
      animate={{ opacity: 1, scale: 1 }}
    >
      <div className="flex justify-between items-center">
        <h2 className="text-xl text-center font-bold text-gray-800">{project.title}</h2>
       
      </div>

      {/* Image Carousel */}
      <ImageCarousel projectId={project.id} totalImages={project.images} />

      {/* Project Details */}
      <div className="grid grid-cols-2 gap-2 text-sm text-gray-600">
        {Object.entries(project.details).map(([key, value]) => (
          <div key={key} className="flex justify-between border-b pb-1">
            <span className="font-medium">{key}:</span>
            <span>{value}</span>
          </div>
        ))}
      </div>

      {/* Description */}
      <p className="text-gray-700 text-sm leading-relaxed">
        {project.description}
      </p>
    </motion.div>
  );
};

// Main Projects Showcase Component
const OrthophotoGenerationProjects = () => {
  return (
    <div className="bg-gray-50 min-h-screen py-12 px-4">
      <div className="container mx-auto">
        <motion.h1 
          className="text-3xl font-bold text-center mb-10 text-gray-800"
          initial={{ opacity: 0, y: -50 }}
          animate={{ opacity: 1, y: 0 }}
        >
         Orthophoto Generation
        </motion.h1>

        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {projects.map(project => (
            <ProjectCard key={project.id} project={project} />
          ))}
        </div>
      </div>
    </div>
  );
};

export default OrthophotoGenerationProjects;